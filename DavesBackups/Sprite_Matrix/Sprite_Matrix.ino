///MAX72xx CODE
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Max72xxPanel.h>
int pinCS = D4; // Attach CS to this pin, DIN to MOSI and CLK to SCK (cf http://arduino.cc/en/Reference/SPI )
int numberOfHorizontalDisplays = 4;
int numberOfVerticalDisplays = 1;
Max72xxPanel matrix = Max72xxPanel(pinCS, numberOfHorizontalDisplays, numberOfVerticalDisplays);
//END MAX 72xx Code

//const prog_uint8_t sprite_01[8] ={0x18,0x3C,0x7E,0xDB,0xFF,0x5A,0x81,0x42};
//const prog_uint8_t sprite_02[8] ={0b00100100,0b00100100,0x7E,0xDB,0xFF,0b01111110,0x81,0x42};
//const prog_uint8_t sprite_03[8] ={0b01000010,0b00100100,0x7E,0xDB,0xFF,0b00111100,0x24,0x18};

const prog_uint8_t sprite_01[3][8] = {
  { 0b00011000,
    0b00111100,
    0b01111110,
    0b11011011,
    0b11111111,
    0b01011010,
    0b10000001,
    0b01000010
  },
  { 0b00100100,
    0b00100100,
    0x7E,
    0xDB,
    0xFF,
    0b01111110,
    0x81,
    0x42
  },
  { 0b01000010,
    0b00100100,
    0x7E,
    0xDB,
    0xFF,
    0b00111100,
    0x24,
    0x18
  }
};


unsigned char font_3x5[11][3] = {
  {0b11111, 0b10001, 0b11111}, // 0
  {0b0, 0b11111, 0b0},         // 1
  {0b10111, 0b10101, 0b11101}, // 2
  {0b10001, 0b10101, 0b11111}, // 3
  {0b11100, 0b00100, 0b11111}, // 4
  {0b11101, 0b10101, 0b10111}, // 5
  {0b11111, 0b10101, 0b10111}, // 6
  {0b10000, 0b10000, 0b11111}, // 7
  {0b11111, 0b10101, 0b11111}, // 8
  {0b11100, 0b10100, 0b11111}, // 9
  {0b0, 0b0, 0b0}              // blank space
};

unsigned char font_4x7[11][4] = {
  { 0b0111110,
    0b1000001,
    0b1000001,
    0b0111110
  }, // 0

  { 0b0010000,
    0b0100000,
    0b1111111,
    0b0
  },       // 1
  {0b100111, 0b1001001, 0b1001001, 0b110011},   // 2
  {0b100010, 0b1001001, 0b1001001, 0b110110},   // 3
  {0b1111000, 0b1000, 0b1000, 0b1111111},       // 4
  {0b1110010, 0b1001001, 0b1001001, 0b1000110}, // 5
  {0b111110, 0b1001001, 0b1001001, 0b110},      // 6
  {0b1100000, 0b1000111, 0b1011000, 0b1100000}, // 7
  {0b110110, 0b1001001, 0b1001001, 0b110110},   // 8
  {0b110000, 0b1001001, 0b1001001, 0b111110},   // 9
  {0b0, 0b0, 0b0, 0b0}                          // blank space
};

unsigned char tengu[][8] =
{
  {
    0x42,    // _X____X_  tengu 0
    0x00,    // ________
    0x18,    // ___XX___
    0x00,    // ________
    0x00,    // ________
    0x18,    // ___XX___
    0x18,    // ___XX___
    0x00,    // ________
  },
  {
    0x42,    // _X____X_  tengu 1
    0x00,    // ________
    0x18,    // ___XX___
    0x00,    // ________
    0x00,    // ________
    0x3C,    // __XXXX__
    0x3C,    // __XXXX__
    0x00,    // ________
  },
  {
    0x42,    // _X____X_  tengu 2
    0x00,    // ________
    0x18,    // ___XX___
    0x00,    // ________
    0x18,    // ___XX___
    0x24,    // __X__X__
    0x24,    // __X__X__
    0x18,    // ___XX___
  },
  {
    0x42,    // _X____X_  tengu 3
    0x00,    // ________
    0x18,    // ___XX___
    0x00,    // ________
    0x3C,    // __XXXX__
    0x24,    // __X__X__
    0x24,    // __X__X__
    0x3C,    // __XXXX__
  },
  {
    0x42,    // _X____X_  tengu 4
    0x00,    // ________
    0x18,    // ___XX___
    0x00,    // ________
    0x7E,    // _XXXXXX_
    0x42,    // _X____X_
    0x42,    // _X____X_
    0x7E,    // _XXXXXX__
  },
  {
    0x42,    // _X____X_  tengu 5
    0x00,    // ________
    0x18,    // ___XX___
    0x00,    // ________
    0x7E,    // _XXXXXX_
    0x81,    // X______X
    0x81,    // X______X
    0x7E,    // _XXXXXX_
  },
  {
    0x42,    // _X____X_  tengu 6
    0x00,    // ________
    0x18,    // ___XX___
    0x7E,    // _XXXXXX_
    0x81,    // X______X
    0x81,    // X______X
    0x81,    // X______X
    0x7E,    // _XXXXXX_
  }
};

const prog_uchar letter3x6[58] [6]=
//unsigned char letter3x6[][6] =
{
  { //A
    0b010,
    0b101,
    0b101,
    0b111,
    0b101,
    0b101
  }
  ,
  { //B
    0b110,
    0b101,
    0b110,
    0b101,
    0b101,
    0b110
  }
  ,
  { //C
    0b010,
    0b101,
    0b100,
    0b100,
    0b101,
    0b010
  }
  ,
  { //D
    0b110,
    0b101,
    0b101,
    0b101,
    0b101,
    0b110
  }
  ,
  { //E
    0b111,
    0b100,
    0b110,
    0b100,
    0b100,
    0b111
  }
  ,
  { //F
    0b111,
    0b100,
    0b110,
    0b100,
    0b100,
    0b100
  }
  ,
  { //G
    0b010,
    0b101,
    0b100,
    0b101,
    0b101,
    0b011
  }
  ,
  { //H
    0b101,
    0b101,
    0b111,
    0b101,
    0b101,
    0b101
  }
  ,
  { //I
    0b111,
    0b010,
    0b010,
    0b010,
    0b010,
    0b111
  }
  ,
  { //J
    0b111,
    0b001,
    0b001,
    0b001,
    0b101,
    0b010
  }
  ,
  { //K
    0b101,
    0b101,
    0b110,
    0b110,
    0b101,
    0b101
  }
  ,
  { //L
    0b100,
    0b100,
    0b100,
    0b100,
    0b100,
    0b111
  }
  ,
  { //M
    0b101,
    0b111,
    0b111,
    0b111,
    0b101,
    0b101
  }
  ,
  { //N
    0b101,
    0b101,
    0b111,
    0b111,
    0b101,
    0b101
  }
  ,
  { //O
    0b010,
    0b101,
    0b101,
    0b101,
    0b101,
    0b010
  }
  ,
  { //P
    0b110,
    0b101,
    0b101,
    0b110,
    0b100,
    0b100
  }
  ,
  { //Q
    0b010,
    0b101,
    0b101,
    0b101,
    0b111,
    0b011
  }
  ,
  { //R
    0b110,
    0b101,
    0b111,
    0b110,
    0b101,
    0b101
  }
  ,
  { //S
    0b011,
    0b100,
    0b010,
    0b001,
    0b001,
    0b110
  }
  ,
  { //T
    0b111,
    0b010,
    0b010,
    0b010,
    0b010,
    0b010
  }
  ,
  { //U
    0b101,
    0b101,
    0b101,
    0b101,
    0b101,
    0b010
  }
  ,
  { //V
    0b101,
    0b101,
    0b101,
    0b101,
    0b010,
    0b010
  }
  ,
  { //W
    0b101,
    0b101,
    0b101,
    0b111,
    0b111,
    0b101
  }
  ,
  { //X
    0b101,
    0b101,
    0b010,
    0b010,
    0b101,
    0b101
  }
  ,
  { //Y
    0b101,
    0b101,
    0b101,
    0b010,
    0b010,
    0b010
  }
  ,
  { //Z
    0b111,
    0b001,
    0b010,
    0b010,
    0b100,
    0b111
  }
  ,
  //};
  ///*
  { //
    0b111,
    0b111,
    0b111,
    0b111,
    0b111,
    0b111
  }
  ,
  { //
    0b111,
    0b111,
    0b111,
    0b111,
    0b111,
    0b111
  }
  ,
  { //
    0b111,
    0b111,
    0b111,
    0b111,
    0b111,
    0b111
  }
  ,
  { //
    0b111,
    0b111,
    0b111,
    0b111,
    0b111,
    0b111
  }
  ,
  { //
    0b000,
    0b000,
    0b000,
    0b000,
    0b000,
    0b000
  }
  ,
  { //
    0b111,
    0b111,
    0b111,
    0b111,
    0b111,
    0b111
  }
  ,


  { //a
    0b000,
    0b000,
    0b011,
    0b101,
    0b101,
    0b011
  }
  ,
  { //b
    0b100,
    0b100,
    0b110,
    0b101,
    0b101,
    0b110
  }
  ,
  { //c
    0b000,
    0b000,
    0b011,
    0b100,
    0b100,
    0b011
  }
  ,
  { //d
    0b001,
    0b001,
    0b011,
    0b101,
    0b101,
    0b011
  }
  ,
  { //e
    0b000,
    0b010,
    0b101,
    0b111,
    0b100,
    0b011
  }
  ,
  { //f
    0b000,
    0b011,
    0b100,
    0b110,
    0b100,
    0b100
  }
  ,
  { //g
    0b000,
    0b011,
    0b101,
    0b011,
    0b001,
    0b110
  }
  ,


  { //h
    0b100,
    0b100,
    0b100,
    0b110,
    0b101,
    0b101
  }
  ,
  { //i
    0b000,
    0b010,
    0b000,
    0b010,
    0b010,
    0b010
  }
  ,
  { //j
    0b000,
    0b001,
    0b000,
    0b001,
    0b001,
    0b110
  }
  ,
  { //k
    0b100,
    0b100,
    0b101,
    0b110,
    0b110,
    0b101
  }
  ,
  { //l
    0b100,
    0b100,
    0b100,
    0b100,
    0b100,
    0b010
  }
  ,
  { //m
    0b000,
    0b101,
    0b111,
    0b111,
    0b101,
    0b101
  }
  ,
  { //n
    0b000,
    0b110,
    0b101,
    0b101,
    0b101,
    0b101
  }
  ,
  { //o
    0b000,
    0b010,
    0b101,
    0b101,
    0b101,
    0b010
  }
  ,
  { //p
    0b000,
    0b110,
    0b101,
    0b110,
    0b100,
    0b100
  }
  ,
  { //q
    0b000,
    0b011,
    0b101,
    0b011,
    0b001,
    0b001
  }
  ,
  { //r
    0b000,
    0b110,
    0b101,
    0b100,
    0b100,
    0b100
  }
  ,
  { //s
    0b000,
    0b011,
    0b100,
    0b010,
    0b001,
    0b110
  }
  ,
  { //t
    0b000,
    0b100,
    0b110,
    0b100,
    0b101,
    0b010
  }
  ,
  { //u
    0b000,
    0b101,
    0b101,
    0b101,
    0b101,
    0b011
  }
  ,
  { //v
    0b000,
    0b101,
    0b101,
    0b101,
    0b010,
    0b010
  }
  ,
  { //w
    0b000,
    0b101,
    0b101,
    0b111,
    0b111,
    0b101
  }
  ,
  { //x
    0b000,
    0b101,
    0b101,
    0b010,
    0b101,
    0b101
  }
  ,
  { //y
    0b000,
    0b101,
    0b101,
    0b011,
    0b001,
    0b110
  }
  ,
  { //z
    0b000,
    0b111,
    0b001,
    0b010,
    0b100,
    0b111
  }

};


void setup() {
  matrix.setIntensity(1); // Use a value between 0 and 15 for brightness
  matrix.setCursor(0, 0);
  matrix.fillScreen(LOW);
}

void loop() {
  // void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h, uint16_t color);

  for (int loop = 0; loop < 6; loop++) {
     matrix.fillScreen(LOW);
     matrix.drawBitmap(0, 0, tengu[loop], 8, 8, 1);
     matrix.write();
     delay(100);
  }

  for (int loop = 6; loop > 0; loop--) {
     matrix.fillScreen(LOW);
     matrix.drawBitmap(0, 0, tengu[loop], 8, 8, 1);
     matrix.write();
     delay(100);
  }


/*  for (int loop = 0; loop < 58; loop--) {
    matrix.fillScreen(LOW);
    matrix.drawBitmap(0, 0, letter3x6[loop], 8, 8, 1);
    matrix.write();
    delay(1000);
  }
*/
}


